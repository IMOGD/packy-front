@startuml
'enum'

enum GAME_TYPE {
    SOLO,
    DUO,
    MULTI
}

enum CHAR_TYPE {
    PACKY,
    GHOST,
    // .. etc
}



'package'
package EVENT_PACKAGE <<Rectangle>> {
    interface chatEventInterface {
        eventType : CHAT_EVENT
        userIdx : uuid // 발송 유저
        targetIdx? : uuid // 이벤트 받을 유저
        roomData : roomDataInterface // 방을 구성하고 있는 정보
    }

    interface roomDataInterface {
        map : mapInterface
        roomIdx : uuid // 게임방 고유번호
        roomUserInfoList : userInfo[] // 게임에 참여하고 있는 유저 리스트
    }

    interface userInfo {
        userIdx : uuid
        userNickName : string;
        userId : string;
        userCharacter : CHAR_TYPE;

    }

    interface gameEventInterface {
        eventType : CHAT_EVENT.GAME
        userIdx : uuid
        targetIdx : uuid
        roomIdx : uuid
        action : VECTOR // GAME.MOVE 일때만 적용



    }

    enum CHAT_EVENT {
        'MOVE, // 움직임
        'END, // 게임종료
        'RESTART, // 재시작
        'PLAYER_EVENT, // 술래와 도둑의 관계 변경 or 이벤트
        SYSTEM, // 시스템에서 발생하는 이벤트
        USER, // 유저 행위로 발생하는 이벤트
        GAME, // 게임으로 인해 발생하는 이벤트
    }

    enum SYSTEM {
        CONNECT_SERVER // 서버 연결됨
        DISCONNECT_SERVER // 서버 연결 끊어짐

    }

    enum USER {
        - ROOM_CREATE // 게임방 생성 (api로 활용할듯)
        ROOM_EDIT // 게임방 수정
        ROOM_DEL // 게임방 삭제
        ROOM_JOIN // 게임방 입장
        ROOM_LEAVE // 게임방 퇴장
        USER_KICK // 유저 강퇴
        - ?ROOM_REJOIN // 재입장 요청
        --
        CHOOSE_CHAR // 캐릭터 선택
        CHOOSE_MAP // 맵선택
    }

    enum GAME {
        GAME_START // 게임시작
        GAME_END // 게임 끝
        MOVE // 플레이어 이동
        CATCH // 상대를 잡음
        ALL_TICKET // 티켓을 전부 먹어 포식관계가 반전
    }

    enum VECTOR {
        UP,
        DOWN,
        LEFT,
        RIGHT
    }

    'enum PLAYER_EVENT_TYPE {
    '    CATCH, // 술래가 도둑을 잡음 (도둑 die)
    '   EAT_ALL // 도둑이 티켓을 다먹음 (술래 도둑 관계 역전)
    '}
    CHAT_EVENT *-- SYSTEM
    CHAT_EVENT *-- USER
    CHAT_EVENT *-- GAME
    chatEventInterface *-- CHAT_EVENT
    chatEventInterface *-- roomDataInterface
    roomDataInterface *-- userInfo
    gameEventInterface *-- CHAT_EVENT
    gameEventInterface *-- VECTOR
}


'interface'


interface mapInterface {
    name : string;
    key : string;
    src : string;
}

interface charInterface {
    name : string;
    key : string;
    src : string;
}


'class'
class game extends EventTarget {
    game : Phaser.Game | undefined;
    contentContainer : Phaser.GameObjects.Container;
    requestAnimationId : number;

    preload(): void;
    create(): void;
    resize(): void;
    getScene(): Phaser.Scene;
    gamePreload(): void;
    gameCreate():void;
    gameUpdate():void;
    gameStart():void;
}


class mainScene extends Phaser.Scene {
    - _character : CHAR_TYPE
    - _character_2p : CHAR_TYPE
    - _map : mapInterface
    - _gameType : GAME_TYPE
    + w : number // width
    + h: number // height

    + preload()
    + create() // set width, height to Phaser.Game.Canvas
    + update()

    + setMap() // map 설정
    + getMap() : mapInterface
    + setCharacter(player : number) // character 설정
    + getCharacter(player : number) : charInterface
    + setGameType() // 1p, 2p, multi 설정
    + getGameType()
}

class startPage extends mainScene {
    // start page
    // it can select 1p, 2p, multiplay
    - _gameTypeList : GAME_TYPE[]

    +super.setGameType()
}

class chooseCharacter extends mainScene {
    // choose Character
    // packy, ghost ... etc
    - _characterList : charInterface[]

    + super.setCharacter(player))
}

class chooseMap extends mainScene {
    // choose map
    // it can select maps

    + super.setMap()
}

class gameScene extends mainScene{
    - _character = super.getCharacter(player)
    - _character_2p = super.getCharacter(player)
    - _map = super.getMap
    - _gameType = super.getGameType

    + preload() // load Map, load Character
    + create() // create map, create character, if gameType is MULTI : connect socket
    + update() // update phaser key input
}


class chatUtil <socket.js> {
    - _roomIdx : number
    - _userIdx : uuid
    - _userNickName : string;

    + connectServer()
    + emitEvent()
    + eventListener()
}

class Packy extends Phaser.Physics.Arcade.Container{
    - _moveSpeed : number
    - _target : Phaser.GameObject.Container // 잡아야할 대상
    - _nickName : string // 로그인한 사용자 닉네임


    + update(phaser.input) // setVelocity()
    - setVelocity() // 이동
    - catchTarget() // 타겟을 잡았는지 이벤트 트리거
    + setTarget(target : Phaser.GameObject.Container) : void
    + getTarget(): Phaser.GameObject.Container
    + gameOver() : void // 죽었을때
}

'relation'
chatUtil .. gameScene
Packy .. chooseCharacter
EVENT_PACKAGE .. chatUtil



@enduml